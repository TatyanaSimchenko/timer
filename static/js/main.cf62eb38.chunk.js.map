{"version":3,"sources":["components/SettingsContext/SettingsContext.jsx","components/BackButton/BackButton.jsx","components/SettingsPage/SettingsPage.jsx","components/PauseButton/PauseButton.jsx","components/PlayButton/PlayButton.jsx","components/SettingsButton/SettingsButton.jsx","components/timer/Timer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SettingsContext","React","createContext","BackButton","props","className","xmlns","viewBox","fill","fillRule","d","clipRule","SettingsPage","settingsInfo","useContext","style","textAlign","workMinutes","ReactSlider","thumbClassName","trackClassName","value","onChange","newValue","setWorkMinutes","min","max","breakMinutes","setBreakMinutes","marginTop","onClick","setShowSettingsPage","PauseButton","PlayButton","SettingsButton","Timer","useState","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","modeRef","useEffect","current","interval","setInterval","nextMode","nextSeconds","switchMode","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","text","styles","buildStyles","textColor","pathColor","trailColor","App","showSettingsPage","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf62eb38.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SettingsContext = React.createContext({});\r\n\r\nexport default SettingsContext;\r\n","import React from \"react\";\r\n\r\nfunction BackButton(props) {\r\n  return (\r\n    <button {...props} className=\"settings-button\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n      Back\r\n    </button>\r\n  );\r\n}\r\nexport default BackButton;\r\n","import React, { useContext } from \"react\";\r\nimport \"./settingsPage.css\";\r\nimport ReactSlider from \"react-slider\";\r\nimport SettingsContext from \"../SettingsContext/SettingsContext\";\r\nimport BackButton from \"../BackButton/BackButton\";\r\n\r\nfunction SettingsPage() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n  return (\r\n    <div style={{ textAlign: \"left\" }}>\r\n      <p className=\"settings-title\">Settings</p>\r\n      <label>work minutes: {settingsInfo.workMinutes}:00</label>\r\n      <ReactSlider\r\n        className={\"slider\"}\r\n        thumbClassName={\"thumb\"}\r\n        trackClassName={\"truck\"}\r\n        value={settingsInfo.workMinutes}\r\n        onChange={(newValue) => settingsInfo.setWorkMinutes(newValue)}\r\n        min={1}\r\n        max={120}\r\n      />\r\n\r\n      <label>break minutes: {settingsInfo.breakMinutes}:00</label>\r\n      <ReactSlider\r\n        className={\"slider green\"}\r\n        thumbClassName={\"thumb\"}\r\n        trackClassName={\"truck\"}\r\n        value={settingsInfo.breakMinutes}\r\n        onChange={(newValue) => settingsInfo.setBreakMinutes(newValue)}\r\n        min={1}\r\n        max={120}\r\n      />\r\n      <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n        <BackButton onClick={() => settingsInfo.setShowSettingsPage(false)} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsPage;\r\n","import React from \"react\";\r\n\r\nfunction PauseButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PauseButton;\r\n","import React from \"react\";\r\n\r\nfunction PlayButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PlayButton;\r\n","import React from \"react\";\r\nimport \"./settingsButton.css\";\r\nfunction SettingsButton(props) {\r\n  return (\r\n    <button {...props} className=\"settings-button\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n      Settings\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SettingsButton;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport PauseButton from \"../PauseButton/PauseButton\";\r\nimport PlayButton from \"../PlayButton/PlayButton\";\r\nimport SettingsButton from \"../SettingsButton/SettingsButton\";\r\nimport SettingsContext from \"../SettingsContext/SettingsContext\";\r\n\r\nconst red = \"#f54e4e\";\r\nconst green = \"#4aec8c\";\r\n\r\nfunction Timer() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [mode, setMode] = useState(\"work\");\r\n  const [secondsLeft, setSecondsLeft] = useState(0);\r\n\r\n  const secondsLeftRef = useRef(secondsLeft);\r\n  const isPausedRef = useRef(isPaused);\r\n  const modeRef = useRef(mode);\r\n\r\n  function tick() {\r\n    secondsLeftRef.current--;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n  }\r\n\r\n  function initTimer() {\r\n    setSecondsLeft(settingsInfo.workMinutes * 60);\r\n  }\r\n\r\n  useEffect(() => {\r\n    initTimer();\r\n    function switchMode() {\r\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\r\n      const nextSeconds =\r\n        (nextMode === \"work\"\r\n          ? settingsInfo.workMinutes\r\n          : settingsInfo.breakMinutes) * 60;\r\n\r\n      setMode(nextMode);\r\n      modeRef.current = nextMode;\r\n\r\n      setSecondsLeft(nextSeconds);\r\n      secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n\r\n    const interval = setInterval(() => {\r\n      if (isPausedRef.current) {\r\n        return;\r\n      }\r\n      if (secondsLeftRef.current === 0) {\r\n        return switchMode();\r\n      }\r\n\r\n      tick();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [settingsInfo]);\r\n\r\n  const totalSeconds =\r\n    mode === \"work\"\r\n      ? settingsInfo.workMinutes * 60\r\n      : settingsInfo.breakMinutes * 60;\r\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\r\n\r\n  const minutes = Math.floor(secondsLeft / 60);\r\n  let seconds = secondsLeft % 60;\r\n  if (seconds < 10) seconds = \"0\" + seconds;\r\n\r\n  return (\r\n    <div>\r\n      <CircularProgressbar\r\n        value={percentage}\r\n        text={minutes + \":\" + seconds}\r\n        styles={buildStyles({\r\n          textColor: \"#fff\",\r\n          pathColor: mode === \"work\" ? red : green,\r\n          trailColor: \"rgba(255, 255, 255, .6)\",\r\n        })}\r\n      />\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {isPaused ? (\r\n          <PlayButton\r\n            onClick={() => {\r\n              setIsPaused(false);\r\n              isPausedRef.current = false;\r\n            }}\r\n          />\r\n        ) : (\r\n          <PauseButton\r\n            onClick={() => {\r\n              setIsPaused(true);\r\n              isPausedRef.current = true;\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <SettingsButton\r\n          onClick={() => settingsInfo.setShowSettingsPage(true)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import \"./App.css\";\nimport SettingsPage from \"./components/SettingsPage/SettingsPage\";\nimport Timer from \"./components/timer/Timer\";\nimport { useState } from \"react\";\nimport SettingsContext from \"./components/SettingsContext/SettingsContext\";\n\nfunction App() {\n  const [showSettingsPage, setShowSettingsPage] = useState(false);\n  const [workMinutes, setWorkMinutes] = useState(30);\n  const [breakMinutes, setBreakMinutes] = useState(5);\n\n  return (\n    <main>\n      <SettingsContext.Provider\n        value={{\n          showSettingsPage,\n          setShowSettingsPage,\n          workMinutes,\n          breakMinutes,\n          setWorkMinutes,\n          setBreakMinutes,\n        }}\n      >\n        {showSettingsPage ? <SettingsPage /> : <Timer />}\n      </SettingsContext.Provider>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}